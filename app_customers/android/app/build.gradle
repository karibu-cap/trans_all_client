def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Use 'dev' as our default environment.
def dartEnvironmentVariables = [
    TRANSTU_APP_ENVIRONMENT: 'dev',
    TRANSTU_APP_NAME: 'TransTu.DEV',
];

// Parse the dart-defines given as input ('flutter run --dart-define=XXX') and
// add them to dartEnvironmentVariables.
if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
        .split(',')
        .collectEntries { entry ->
            def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
            [(pair.first()): pair.last()]
        }
}

// Copy the appropriate google-services config to the 'android/app/' directory.
// The google-services.json file will then be parsed by the google-services
// plugin to configure the app for the corresponding environment.
copy {
    into file(".").absolutePath
    from file("services/${dartEnvironmentVariables.TRANSTU_APP_ENVIRONMENT}/google-services.json").absolutePath
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// Load the properties required to sign the release app.
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
def useDebugSignature = !keystorePropertiesFile.exists() && dartEnvironmentVariables.TRANSTU_APP_ENVIRONMENT=='dev'

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion "25.1.8937393"
    compileSdkVersion 33

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.karibu.transtu"
        applicationIdSuffix "." + dartEnvironmentVariables.TRANSTU_APP_ENVIRONMENT
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion flutter.minSdkVersion
        resValue "string", "app_name", dartEnvironmentVariables.TRANSTU_APP_NAME
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
   }
   buildTypes {
       release {
           signingConfig useDebugSignature ? signingConfigs.debug : signingConfigs.release
       }
   }

}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
